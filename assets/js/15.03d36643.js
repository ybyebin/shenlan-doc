(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{421:function(e,t,a){"use strict";a.r(t);var s=a(2),r=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"git-常用操作命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-常用操作命令"}},[e._v("#")]),e._v(" Git 常用操作命令")]),e._v(" "),t("ul",[t("li",[t("p",[t("font",{attrs:{color:"#FF0000"}},[e._v(" git diff : 比较工作区与暂存区的差异 ")]),e._v(" "),t("br")],1)]),e._v(" "),t("li",[t("p",[e._v("git diff --cached : 比较工作区与暂存区的差异"),t("br")])]),e._v(" "),t("li",[t("p",[e._v("get reset HEAD <\\file> : 暂存区与版本区保持一致"),t("br")])]),e._v(" "),t("li",[t("p",[t("font",{attrs:{color:"#FF0000"}},[e._v(" git checkout <\\file> : 暂存区(暂存区没有找版本区) 覆盖工作区的内容 或者切换分支 ")]),e._v(" "),t("br")],1)]),e._v(" "),t("li",[t("p",[e._v("git rm <\\file> --cached :删除暂存区文件"),t("br")])]),e._v(" "),t("li",[t("p",[t("font",{attrs:{color:"#FF0000"}},[e._v("git reset --hard <\\version> : 恢复版本区指定版本的内容到工作区")]),e._v(" "),t("br")],1)]),e._v(" "),t("li",[t("p",[t("font",{attrs:{color:"#FF0000"}},[e._v("git reset --hard^ : 恢复版到上一个版本")]),e._v(" "),t("br")],1)]),e._v(" "),t("li",[t("p",[e._v("git reflog :查看引用版本号")])]),e._v(" "),t("li",[t("p",[e._v("git branch :查看分支")])]),e._v(" "),t("li",[t("p",[e._v("git branch -d :删除分支")])]),e._v(" "),t("li",[t("p",[e._v("git log --pretty=oneline")])]),e._v(" "),t("li",[t("p",[e._v("git log --graph --pretty=oneline :查看树状历史")])]),e._v(" "),t("li",[t("p",[e._v("git fetch 是从远程分支拉取代码。fetch 结合 merge 一起用，git fetch + git merge == git pull；")])]),e._v(" "),t("li",[t("p",[e._v("git remote -v :查看联系")])])]),e._v(" "),t("h1",{attrs:{id:"git-分支开发规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-分支开发规范"}},[e._v("#")]),e._v(" Git 分支开发规范")]),e._v(" "),t("h2",{attrs:{id:"分支管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[e._v("#")]),e._v(" 分支管理")]),e._v(" "),t("h3",{attrs:{id:"分支命名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分支命名"}},[e._v("#")]),e._v(" 分支命名")]),e._v(" "),t("p",[t("strong",[e._v("master / main 分支")])]),e._v(" "),t("ul",[t("li",[e._v("master 为主分支，也是用于部署生产环境的分支，确保 master 分支稳定性")]),e._v(" "),t("li",[e._v("master 分支一般由 develop 以及 hotfix 分支合并，任何时间都不能直接修改代码")])]),e._v(" "),t("p",[t("strong",[e._v("develop 分支")])]),e._v(" "),t("ul",[t("li",[e._v("develop 为开发分支，始终保持最新完成以及 bug 修复后的代码")]),e._v(" "),t("li",[e._v("一般开发的新功能时，feature 分支都是基于 develop 分支下创建的")])]),e._v(" "),t("p",[t("strong",[e._v("feature 分支")])]),e._v(" "),t("ul",[t("li",[e._v("开发新功能时，以 develop 为基础创建 feature 分支")]),e._v(" "),t("li",[e._v("分支命名: feature/ 开头的为特性分支， 命名规则: feature/user_module、 feature/cart_module")])]),e._v(" "),t("p",[t("strong",[e._v("release 分支")])]),e._v(" "),t("ul",[t("li",[e._v("release 为预上线分支，发布提测阶段，会 release 分支代码为基准提测"),t("br"),e._v(" "),t("font",{attrs:{color:"#FF0000"}},[e._v(" 当有一组 feature 开发完成，首先会合并到 develop 分支，进入提测时，会创建 release 分支。\n如果测试过程中若存在 bug 需要修复，则直接由开发者在 release 分支修复并提交。\n当测试完成之后，合并 release 分支到 master 和 develop 分支，此时 master 为最新代码，用作上线。\n")])],1)]),e._v(" "),t("p",[t("strong",[e._v("hotfix 分支")])]),e._v(" "),t("ul",[t("li",[e._v("分支命名: hotfix/ 开头的为修复分支，它的命名规则与 feature 分支类似")]),e._v(" "),t("li",[e._v("线上出现紧急问题时，需要及时修复，以 master 分支为基线，创建 hotfix 分支，修复完成后，需要合并到 master 分支和 develop 分支")])]),e._v(" "),t("h3",{attrs:{id:"常见任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见任务"}},[e._v("#")]),e._v(" 常见任务")]),e._v(" "),t("p",[t("strong",[e._v("增加新功能")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(dev)$: git checkout -b feature/xxx            # 从dev建立特性分支\n(feature/xxx)$: blabla                         # 开发\n(feature/xxx)$: git add xxx\n(feature/xxx)$: git commit -m 'commit comment'\n(dev)$: git merge feature/xxx --no-ff          # 把特性分支合并到dev\n\n")])])]),t("p",[t("strong",[e._v("修复紧急 bug")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(master)$: git checkout -b hotfix/xxx         # 从master建立hotfix分支\n(hotfix/xxx)$: blabla                         # 开发\n(hotfix/xxx)$: git add xxx\n(hotfix/xxx)$: git commit -m 'commit comment'\n(master)$: git merge hotfix/xxx --no-ff       # 把hotfix分支合并到master，并上线到生产环境\n(dev)$: git merge hotfix/xxx --no-ff          # 把hotfix分支合并到dev，同步代码\n\n")])])]),t("p",[t("strong",[e._v("测试环境代码")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(release)$: git merge dev --no-ff             # 把dev分支合并到release，然后在测试环境拉取并测试\n")])])]),t("p",[t("strong",[e._v("生产环境上线")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(master)$: git merge testing --no-ff          # 把testing测试好的代码合并到master，运维人员操作\n(master)$: git tag -a v0.1 -m '部署包版本名'    #给版本命名，打Tag\n\n")])])]),t("h2",{attrs:{id:"日志规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#日志规范"}},[e._v("#")]),e._v(" 日志规范")]),e._v(" "),t("p",[e._v("在一个团队协作的项目中，开发人员需要经常提交一些代码去修复 bug 或者实现新的 feature。而项目中的文件和实现什么功能、解决什么问题都会渐渐淡忘，最后需要浪费时间去阅读代码。但是好的日志规范 commit messages 编写有帮助到我们，它也反映了一个开发人员是否是良好的协作者。")]),e._v(" "),t("p",[t("strong",[e._v("编写良好的 Commit messages 可以达到 3 个重要的目的：")])]),e._v(" "),t("ul",[t("li",[e._v("加快 review 的流程")]),e._v(" "),t("li",[e._v("帮助我们编写良好的版本发布日志")]),e._v(" "),t("li",[e._v("让之后的维护者了解代码里出现特定变化和 feature 被添加的原因")])]),e._v(" "),t("p",[t("strong",[e._v("Commit messages 的基本语法")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("具体格式为:\n<type>: <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<scope>\n<BLANK LINE>\n<footer>\n")])])]),t("ul",[t("li",[e._v("type: 本次 commit 的类型，诸如 bugfix docs style 等")]),e._v(" "),t("li",[e._v("scope: 本次 commit 波及的范围")]),e._v(" "),t("li",[e._v("subject: 简明扼要的阐述下本次 commit 的主旨，在原文中特意强调了几点\n"),t("ul",[t("li",[e._v("1 使用祈使句，是不是很熟悉又陌生的一个词")]),e._v(" "),t("li",[e._v("2 首字母不要大写")]),e._v(" "),t("li",[e._v("3 结尾无需添加标点")])])]),e._v(" "),t("li",[e._v("body: 在主体内容中我们需要把本次 commit 详细的描述一下，比如此次变更的动机，如需换行，则使用 |")]),e._v(" "),t("li",[e._v("footer: 描述下与之关联的 issue 或 break change")])]),e._v(" "),t("p",[t("strong",[e._v("Type 的类别说明：")])]),e._v(" "),t("ul",[t("li",[e._v("feat: 添加新特性")]),e._v(" "),t("li",[e._v("fix: 修复 bug")]),e._v(" "),t("li",[e._v("docs: 仅仅修改了文档")]),e._v(" "),t("li",[e._v("style: 仅仅修改了空格、格式缩进、都好等等，不改变代码逻辑")]),e._v(" "),t("li",[e._v("refactor: 代码重构，没有加新功能或者修复 bug")]),e._v(" "),t("li",[e._v("perf: 增加代码进行性能测试")]),e._v(" "),t("li",[e._v("test: 增加测试用例")]),e._v(" "),t("li",[e._v("chore: 改变构建流程、或者增加依赖库、工具等")])]),e._v(" "),t("p",[t("strong",[e._v("Commit messages 格式要求")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 标题行：50个字符以内，描述主要变更内容\n#\n# 主体内容：更详细的说明文本，建议72个字符以内。 需要描述的信息包括:\n#\n# * 为什么这个变更是必须的? 它可能是用来修复一个bug，增加一个feature，提升性能、可靠性、稳定性等等\n# * 他如何解决这个问题? 具体描述解决问题的步骤\n# * 是否存在副作用、风险?\n#\n# 如果需要的化可以添加一个链接到issue地址或者其它文档\n")])])]),t("p",[t("strong",[e._v("示例 1")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("feat($browser): onUrlChange event (popstate/hashchange/polling)\n\nAdded new event to $browser:\n- forward popstate event if available\n- forward hashchange event if popstate not available\n- do polling when neither popstate nor hashchange available\n\nBreaks $browser.onHashChange, which was removed (use onUrlChange instead)\n")])])]),t("p",[t("strong",[e._v("示例 2")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("fix($compile): couple of unit tests for IE9\n\nOlder IEs serialize html uppercased, but IE9 does not...\nWould be better to expect case insensitive, unfortunately jasmine does\nnot allow to user regexps for throw expectations.\n\nCloses #392\nBreaks foo.bar api, foo.baz should be used instead\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);